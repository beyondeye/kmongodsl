package com.beyondeye.kmongodsl

import com.beyondeye.kmongodsl.project.AggregateStageProject
/**
 * Created by daely on 6/27/2017.
 *
 * main ideas behind defining the DSL:
 * 1) each tag in the DSL tag tree has two associated components
 *      a) a generating function defined as member function of the class associated to the parent tag
 *      b) a class that contains as member functions the generating functions of the child tags. This tags derives from MongoDSLElement,
 *         unless it is at root level: in this case it derive from MongoDSLRootElement. This difference is actually only technical not substantial:
 *         a root element render a BsonDocument, a normal element render a BsonElement
 *
 */
/**
 * TOP LEVEL FUNCTION for generating starting the DSL parser for defining the bson for one stage of mongodb aggregate
 */
fun mongoAggregateStage(init: MongoAggregateStage.() -> Unit): MongoAggregateStage {
    val stage = MongoAggregateStage()
    stage.init()
    return stage
}

/**
 *  //top level class for the dsl, generated by [mongoAggregateStage] function
 */
class MongoAggregateStage: MongoDSLRootElementBase() {

    /**
     * second level dsl tag, is defined as member function of first level class
     * This is actually a general rule: generating function for n+1 th level dsl tag is defined as member function of n th level  dsl tag class
     */
    fun project(init: AggregateStageProject.()-> Unit)= children.addChild(AggregateStageProject(),init)

}
